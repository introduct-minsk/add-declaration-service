<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Consent-service" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Content-Language" elementType="Header">
            <stringProp name="Header.name">Content-Language</stringProp>
            <stringProp name="Header.value">en</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Localhost" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">7070</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Server" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">172.31.22.204</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">31524</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">60000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">240000</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="addServiceDeclaration Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Requests per second schedule" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="-611709986">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
            <collectionProp name="1568914379">
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
            <collectionProp name="1599047929">
              <stringProp name="1629">30</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
            <collectionProp name="1607503179">
              <stringProp name="1691">50</stringProp>
              <stringProp name="1753">70</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
            <collectionProp name="1638359339">
              <stringProp name="1753">70</stringProp>
              <stringProp name="1815">90</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
            <collectionProp name="-67763946">
              <stringProp name="1815">90</stringProp>
              <stringProp name="48">0</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">${DATASET_PATH}/addServiceDeclaration.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">serviceProviderId,serviceDeclarationId,consentMaxDurationSeconds</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable serviceProviderId" enabled="true">
            <stringProp name="maximumValue">100000000000000000</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">serviceProviderId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable serviceDeclarationId" enabled="true">
            <stringProp name="maximumValue">100000000000000000</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed"></stringProp>
            <stringProp name="variableName">serviceDeclarationId</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Authenticated-User-Id</stringProp>
                <stringProp name="Header.value">${serviceProviderId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[OK]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }    &#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }  &#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }  &#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1895329101">{&quot;code&quot;:&quot;OK&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[duplicate_declaration]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }  &#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }  &#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;EE&quot;,&#xd;
        &quot;language&quot;: &quot;et&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }  &#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="597668916">{&quot;code&quot;:&quot;duplicate_declaration&quot;,&quot;message&quot;:&quot;There already is a declaration by this party with such id&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Incorrect auth" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Authenticated-User-Id</stringProp>
                  <stringProp name="Header.value">test</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1613225559">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Authenticated identity of the party do not match&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Empty serviceProviderId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-109834431">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service provider id cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] No param serviceProviderId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-109834431">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service provider id cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] &gt; max limit serviceProviderId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-594352342">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service provider id must have size not larger than 100 characters&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Empty serviceDeclarationId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114536290">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service declaration id cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] No param serviceDeclarationId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1114536290">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service declaration id cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] &gt; max limit serviceDeclarationId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1460025490">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Service declaration id must have size not larger than 40 characters&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Incorrect names locale" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;USA&quot;,&#xd;
        &quot;language&quot;: &quot;es&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1377967141">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Declaration name locale country must have two characters&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Empty names" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="9658311">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Declaration name cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Empty descriptions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1636848872">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Declaration description cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Incorrect descriptions locale" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;TRY&quot;,&#xd;
        &quot;language&quot;: &quot;fo&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] Empty technicalDescriptions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1678713707">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Declaration technical description cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] No paramconsentMaxDurationSeconds" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1286216245">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Consent max duration seconds cannot be empty or Null&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] 0 &gt; consentMaxDurationSeconds" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: -1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="968073393">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Consent max duration seconds cannot be negative&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] string consentMaxDurationSeconds" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: &quot;asd&quot;,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1501136482">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Request could not be parsed&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] validUntil in the past" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-04-03T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1543320285">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Valid until must be in future&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] validUntil wrong fmt" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;20200403T1419:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1501136482">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Request could not be parsed&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] needSignature invalid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: 0,&#xd;
  &quot;needSignature&quot;: truefalse&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1501136482">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Request could not be parsed&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] 0&gt; maxCacheSeconds" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: -1,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="44237593">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Cache seconds cannot be negative&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[invalid_request] string maxCacheSeconds" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;serviceProviderId&quot;: &quot;${serviceProviderId}&quot;,&#xd;
 &quot;serviceDeclarationId&quot;: &quot;${serviceDeclarationId}&quot;,&#xd;
  &quot;name&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;description&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;value&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;consentMaxDurationSeconds&quot;: 1,&#xd;
  &quot;technicalDescription&quot;: [&#xd;
    {&#xd;
      &quot;locale&quot;: {&#xd;
        &quot;country&quot;: &quot;US&quot;,&#xd;
        &quot;language&quot;: &quot;en&quot;&#xd;
      },&#xd;
      &quot;value&quot;: &quot;string&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;validUntil&quot;: &quot;2020-07-05T14:19:18.346Z&quot;,&#xd;
  &quot;maxCacheSeconds&quot;: &quot;asd&quot;,&#xd;
  &quot;needSignature&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/declarations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">400</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1501136482">{&quot;code&quot;:&quot;invalid_request&quot;,&quot;message&quot;:&quot;Request could not be parsed&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">summary_report.xls</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
